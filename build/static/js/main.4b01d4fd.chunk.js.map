{"version":3,"sources":["res/subject-foster.png","res/Hearthstone.jpg","res/subject1.png","res/subject2.png","App.js","serviceWorker.js","index.js"],"names":["module","exports","DrawCards","state","isFlipped","apiResponse","handleClick","bind","fetch","then","res","text","console","log","setState","this","callAPI","e","preventDefault","prevState","className","flipDirection","src","hearthstone","alt","onClick","subjectFoster","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"8FAAAA,EAAOC,QAAU,IAA0B,4C,gBCA3CD,EAAOC,QAAU,IAA0B,yC,yECA3CD,EAAOC,QAAU,IAA0B,sC,gBCA3CD,EAAOC,QAAU,IAA0B,sC,qMCUtBC,G,8DAEnB,aAAe,IAAD,8BACZ,gBACKC,MAAQ,CACXC,WAAW,EACXC,YAAa,eAEf,EAAKC,YAAc,EAAKA,YAAYC,KAAjB,gBANP,E,sDAUH,IAAD,OACRC,MAAM,iCACHC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,SACfC,QAAQC,IAAI,QAEbJ,MAAK,SAAAC,GAAG,OAAI,EAAKI,SAAS,CAAET,YAAaK,S,2CAI5CK,KAAKC,Y,kCAGKC,GACVA,EAAEC,iBACFH,KAAKD,UAAS,SAAAK,GAAS,MAAK,CAAEf,WAAYe,EAAUf,gB,+BAIpD,OACE,yBAAKgB,UAAU,OACb,kBAAC,IAAD,CACEhB,UAAWW,KAAKZ,MAAMC,UACtBiB,cAAc,aACdD,UAAU,iBAEV,6BACE,yBAAKE,IAAKC,IAAaH,UAAU,WAAWI,IAAI,OAAOC,QAASV,KAAKT,eAEvE,6BACE,yBAAKgB,IAAKI,IAAeN,UAAU,WAAWI,IAAI,OAAOC,QAASV,KAAKT,gBAG3E,2BAAIS,KAAKZ,MAAME,kB,GA5CgBsB,cCEnBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB/B,MAAK,SAAAgC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLhC,QAAQgC,MAAMA,EAAMC,c","file":"static/js/main.4b01d4fd.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/subject-foster.19ee1451.png\";","module.exports = __webpack_public_path__ + \"static/media/Hearthstone.ed328439.jpg\";","module.exports = __webpack_public_path__ + \"static/media/subject1.30811111.png\";","module.exports = __webpack_public_path__ + \"static/media/subject2.47b7f9d9.png\";","import React, { Component } from 'react';\nimport ReactCardFlip from 'react-card-flip';\nimport subject1 from './res/subject1.png';\nimport subject2 from './res/subject2.png';\nimport subjectFoster from './res/subject-foster.png';\nimport hearthstone from './res/Hearthstone.jpg';\nimport Share from 'social-share-react'\nimport './App.css';\n\n\nexport default class DrawCards extends Component {\n\n  constructor() {\n    super();\n    this.state = {\n      isFlipped: false,\n      apiResponse: 'Node failed',\n    };\n    this.handleClick = this.handleClick.bind(this);\n\n  }\n\n  callAPI() {\n    fetch('http://localhost:9000/testAPI')\n      .then(res => res.text(),\n        console.log('res')\n      )\n      .then(res => this.setState({ apiResponse: res }));\n  }\n\n  componentWillMount() {\n    this.callAPI();\n  }\n\n  handleClick(e) {\n    e.preventDefault();\n    this.setState(prevState => ({ isFlipped: !prevState.isFlipped }));\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <ReactCardFlip\n          isFlipped={this.state.isFlipped}\n          flipDirection=\"horizontal\"\n          className=\"CardContainer\"\n        >\n          <div>\n            <img src={hearthstone} className=\"App-logo\" alt=\"logo\" onClick={this.handleClick} />\n          </div>\n          <div>\n            <img src={subjectFoster} className=\"App-logo\" alt=\"logo\" onClick={this.handleClick} />\n          </div>\n        </ReactCardFlip>\n        <p>{this.state.apiResponse}</p>\n        {/* <Share\n          url='https://www.baidu.com'\n          title='分享生活点滴'\n          disabled={['google', 'facebook', 'twitter', 'qq', 'douban', 'tencent', 'linkedin']}\n          descripiton='我抽到了Foster专业'\n          image={subject1}\n          site={['wechat']}\n        /> */}\n      </div>\n    );\n  }\n\n}\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}